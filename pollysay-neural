#!/usr/bin/env python3

"""Getting Started Example for Python 2.7+/3.3+"""
from boto3 import Session
from botocore.exceptions import BotoCoreError, ClientError
from contextlib import closing
import json
import os
import random
import sys
import subprocess
from tempfile import gettempdir


voices = [
    "Amy",
    "Emma",
    "Brian",
    "Ivy",
    "Joanna",
    "Kendra",
    "Kimberly",
    "Salli",
    "Joey",
    "Justin",
    "Matthew",
]

# Create a client using the credentials and region defined in the [adminuser]
# section of the AWS credentials file (~/.aws/credentials).
session = Session()
polly = session.client("polly")
output_file = "/tmp/polly.mp3"

try:
    voice = sys.argv[1]
except IndexError:
    #voice = voices[random.randint(0, (len(voices)-1) )]
    voice = "Emma"

print ("Spoken by %s." % voice)


try:
    # Request speech synthesis
    response = polly.synthesize_speech(
        Text=sys.stdin.read().rstrip(),
        TextType='ssml',
        OutputFormat="mp3",
        Engine="neural",        VoiceId=voice,
        #SpeechMarkTypes=['ssml', 'word', 'sentence'],
    )
except (BotoCoreError, ClientError) as error:
    # The service returned an error, exit gracefully
    print(error)
    sys.exit(-1)

# Access the audio stream from the response
if "AudioStream" in response:
    # Note: Closing the stream is important because the service throttles on the
    # number of parallel connections. Here we are using contextlib.closing to
    # ensure the close method of the stream object will be called automatically
    # at the end of the with statement's scope.
    with closing(response["AudioStream"]) as stream:

        try:
            # Open a file for writing the output as a binary stream
            with open(output_file, "wb") as f:
                f.write(stream.read())
        except IOError as error:
            # Could not write to file, exit gracefully
            print(error)
            sys.exit(-1)

else:
    # The response didn't contain audio data, exit gracefully
    print("Could not stream audio")
    sys.exit(-1)

# Play the audio using the platform's default player
if sys.platform == "win32":
    os.startfile(output)
else:
    command = "vlc --play-and-exit --no-interact --qt-start-minimized %s" % output_file
    subprocess.run(command.split(" "))
